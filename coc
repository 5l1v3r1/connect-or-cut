#!/bin/sh
# connect-or-cut -- block unwanted connect() calls.
#
# Copyright (c) 2015, Thomas Girard <thomas.g.girard@free.fr>
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  * Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
#  * Neither the name of the author nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
OGLOB=`set +o | grep glob`
set -f

_abs_dirname() {
    (cd `dirname $1` && pwd)
}

EXT="so"
P=`_abs_dirname $0`
LIB="${P}/libconnect-or-cut.${EXT}"

_warn() {
    cat >&2 <<EOF
coc: $*
EOF
}

_die() {
    _warn $*
    exit 1
}

_version() {
    strings "$LIB" 2>/dev/null | grep 'connect-or-cut v' | uniq
    if test $? -ne 0; then
	_die "couldn't find connect-or-cut version!"
    fi
}

_help() {
	cat <<EOF
Usage: coc [OPTION]... [--] COMMAND [ARGS]
Prevent connections to blocked addresses in COMMAND.

If no COMMAND is specified but some addresses are configured to be allowed or
blocked, then shell snippets to set the chosen configuration are displayed.

OPTIONS:
 -d, --allow-dns           	Allow connections to DNS nameservers.
 -a, --allow=ADDRESS[:PORT]	Allow connections to ADDRESS[:PORT].
 -b, --block=ADDRESS[:PORT]	Prevent connections to ADDRESS[:PORT].
 -h, --help                	Print this help message.
 -t, --log-target=LOG      	Where to log. LOG is a comma-separated list
                           	that can contain the following values:
                           	  - stderr	This is the default
                           	  - syslog	Write to syslog
                           	  - file	Write to COMMAND.coc file
 -l, --log-level=LEVEL     	What to log. LEVEL can contain one of the
                           	following values:
                           	  - silent	Do not log anything
                           	  - error	Log errors
                           	  - block	Log errors and blocked
                           	                connections
                           	  - allow	Log errors, blocked and
                           	                allowed connections
                           	  - debug	Log everything
 -v, --version             	Print connect-or-cut version.
EOF
}

_value() {
    echo "$1" | cut -d= -f2
}

_ensure_arg() {
    if test "a$2" = "a"; then
	_die "missing value for \`$1' argument!"
    fi
}

_print_def() {
    if eval test "a\$$1" != "a"; then
	eval "echo $1=\'\$$1\'"
	echo "export $1"
    fi
}

_append() {
    _ensure_arg "$2" "$3"
    eval $1="\$$1#$3"
}

_append_log_target() {
    _ensure_arg "$1" "$2"
    OIFS=$IFS
    IFS=','
    for target in $2; do
	case $target in
	    stderr)
		COC_LOG_TARGET=`echo "$((${COC_LOG_TARGET}|1))"`
		;;
	    syslog)
		COC_LOG_TARGET=`echo "$((${COC_LOG_TARGET}|2))"`
		;;
	    file)
		COC_LOG_TARGET=`echo "$((${COC_LOG_TARGET}|4))"`
		;;
	    *)
		_die "unknown log target \`$target'!"
		;;
	esac
    done
    IFS=$OIFS

    # local variables are not portable, so unset them manually
    unset target
    unset OIFS
}

_set_log_level() {
    _ensure_arg "$1" "$2"
    case "$2" in
	silent)
	    COC_LOG_LEVEL=0
	    ;;
	error)
	    COC_LOG_LEVEL=1
	    ;;
	block)
	    COC_LOG_LEVEL=2
	    ;;
	allow)
	    COC_LOG_LEVEL=3
	    ;;
	debug)
	    COC_LOG_LEVEL=4
	    ;;
	*)
	    _die "unknown log level \`$2'!"
	    ;;
    esac
}

if test "a$COC_LOG_TARGET" = "a"; then
    COC_LOG_TARGET=1
fi

while test $# -gt 0; do
    case "$1" in
	-h|--help)
	    _help
	    exit 0
	    ;;

	-v|--version)
	    _version
	    exit 0
	    ;;

	-d|--allow-dns)
	    for n in `grep '^nameserver ' /etc/resolv.conf | cut -d' ' -f2`; do
	        _append COC_ALLOW "$1" "$n:53"
	    done
	    unset n
	    shift
	    ;;

	-a)
	    _append COC_ALLOW "$1" "$2"
	    shift 2
	    ;;

	--allow=*)
	    _append COC_ALLOW "$1" "`_value $1`"
	    shift
	    ;;

	-b)
	    _append COC_BLOCK "$1" "$2"
	    shift 2
	    ;;

	--block=*)
	    _append COC_BLOCK "$1" "`_value $1`"
	    shift
	    ;;

	-t)
	    _append_log_target "$1" "$2"
	    shift 2
	    ;;

	--log-target=*)
	    _append_log_target "$1" "`_value $1`"
	    shift
	    ;;

	-l)
	    _set_log_level "$1" "$2"
	    shift 2
	    ;;

	--log-level=*)
	    _set_log_level "$1" "`_value $1`"
	    shift
	    ;;

	--)
	    shift
	    break
	    ;;

	-*)
	    _die "unknown \`$1' argument!"
	    ;;

	*)
	    break
	    ;;
    
    esac
done

if test "a$COC_ALLOW" != "a"; then
    COC_ALLOW="`echo $COC_ALLOW | sed -e 's/^#//' -e 's/#/;/g'`"
fi
export COC_ALLOW

if test "a$COC_BLOCK" != "a"; then
    COC_BLOCK="`echo $COC_BLOCK | sed -e 's/^#//' -e 's/#/;/g'`"
fi
export COC_BLOCK

if test $# -eq 0; then
    if test \( "a$COC_ALLOW" != "a" \) -o \( "a$COC_BLOCK" != "a" \); then
	for v in COC_ALLOW COC_BLOCK COC_LOG_TARGET COC_LOG_LEVEL; do
	    _print_def "$v"
	done
	unset v
	exit 0
    else
	_warn "missing command!"
	_help >&2
	exit 1
    fi
fi

unset EXT
unset P

export COC_LOG_TARGET
export COC_LOG_LEVEL

if test "a$LD_PRELOAD" != "a"; then
    LD_PRELOAD="$LIB:$LD_PRELOAD"
else
    LD_PRELOAD="$LIB"
fi

export LD_PRELOAD
unset LIB

eval $OGLOB
unset OGLOB
exec "$@"
