#!/bin/sh

EXT="so"
P=`dirname $0`
LIB="${P}/libconnect-or-cut.${EXT}"

_warn() {
    cat >&2 <<EOF
coc: $*
EOF
}

_die() {
    _warn $*
    exit 1
}

_version() {
    strings "$LIB" 2>/dev/null | grep 'connect-or-cut v'
    if test $? -ne 0; then
	_die "couldn't find connect-or-cut version!"
    fi
}

_help() {
	cat <<EOF
Usage: coc [OPTION]... COMMAND [ARGS]
Prevent connections to blocked addresses in COMMAND.

OPTIONS:
 -a, --allow=ADDRESS[:PORT]	Allow connections to ADDRESS[:PORT].
 -b, --block=ADDRESS[:PORT]	Prevent connections to ADDRESS[:PORT].
 -h, --help                	Print this help message.
 -t, --log-target=LOG      	Where to log. LOG is a comma-separated list
                           	that can contain the following values:
                           	  - stderr	This is the default
                           	  - syslog	Write to syslog
                           	  - file	Write to COMMAND.coc file
 -l, --log-level=LEVEL     	What to log. LEVEL can contain one of the
                           	following values:
                           	  - silent	Do not log anything
                           	  - error	Log errors
                           	  - block	Log errors and blocked
                           	                connections
                           	  - allow	Log errors, blocked and
                           	                allowed connections
                           	  - debug	Log everything
 -v, --version             	Print connect-or-cut version.
EOF
}

_value() {
    echo "$1" | cut -d= -f2
}

_append() {
    if test "a$3" = "a"; then
	_die "missing value for \`$2' argument!"
    fi
    eval $1="\$$1#$3"
}

_append_log_target() {
    if test "a$2" = "a"; then
	_die "missing value for \`$1' argument!"
    fi
    OIFS=$IFS
    IFS=','
    for target in $2; do
	case $target in
	    stderr)
		COC_LOG_TARGET=`echo "$((${COC_LOG_TARGET}|1))"`
		;;
	    syslog)
		COC_LOG_TARGET=`echo "$((${COC_LOG_TARGET}|2))"`
		;;
	    file)
		COC_LOG_TARGET=`echo "$((${COC_LOG_TARGET}|4))"`
		;;
	    *)
		_die "unknown log target \`$target'!"
	esac
    done
    IFS=$OIFS
}

if test "a$COC_LOG_TARGET" = "a"; then
    COC_LOG_TARGET=1
    export COC_LOG_TARGET
fi

while test $# -gt 0; do
    case "$1" in
	-h|--help)
	    _help
	    exit 0
	    ;;

	-v|--version)
	    _version
	    exit 0
	    ;;

	-a)
	    _append COC_ALLOW "$1" "$2"
	    shift 2
	    ;;

	--allow=*)
	    _append COC_ALLOW "$1" "`_value $1`"
	    shift
	    ;;

	-b)
	    _append COC_BLOCK "$1" "$2"
	    shift 2
	    ;;

	--block=*)
	    _append COC_BLOCK "$1" "`_value $1`"
	    shift
	    ;;
	-t)
	    _append_log_target "$1" "$2"
	    shift 2
	    ;;
	--log-target=*)
	    _append_log_target "$1" "`_value $1`"
	    shift
	    ;;
	--)
	    shift
	    break
	    ;;

	*)
	    break
	    ;;
    
    esac
done

if test $# -eq 0; then
    _warn "missing command!"
    _help >&2
    exit 1
fi

if test "a$COC_ALLOW" != "a"; then
    COC_ALLOW="`echo $COC_ALLOW | sed -e 's/^.//' -e 's/#/;/g'`"
fi
export COC_ALLOW

if test "a$COC_BLOCK" != "a"; then
    COC_BLOCK="`echo $COC_BLOCK | sed -e 's/^.//' -e 's/#/;/g'`"
fi
export COC_BLOCK

if test "a$LD_PRELOAD" != "a"; then
    LD_PRELOAD="$LIB:$LD_PRELOAD"
else
    LD_PRELOAD="$LIB"
fi
export LD_PRELOAD

exec "$@"
